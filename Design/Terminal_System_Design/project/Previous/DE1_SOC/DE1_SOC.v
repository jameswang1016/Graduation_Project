
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE1_SOC(

	//////////// CLOCK //////////
	input 		          		CLOCK_50M,
	input 		          		CLOCK2_50M,
	input 		          		CLOCK3_50M,
	input 		          		CLOCK4_50M,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// LED //////////
	output		reg     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// HPS //////////
	inout 		          		HPS_CONV_USB_N,
	output		    [14:0]		HPS_DDR3_ADDR,
	output		     [2:0]		HPS_DDR3_BA,
	output		          		HPS_DDR3_CAS_N,
	output		          		HPS_DDR3_CK_N,
	output		          		HPS_DDR3_CK_P,
	output		          		HPS_DDR3_CKE,
	output		          		HPS_DDR3_CS_N,
	output		     [3:0]		HPS_DDR3_DM,
	inout 		    [31:0]		HPS_DDR3_DQ,
	inout 		     [3:0]		HPS_DDR3_DQS_N,
	inout 		     [3:0]		HPS_DDR3_DQS_P,
	output		          		HPS_DDR3_ODT,
	output		          		HPS_DDR3_RAS_N,
	output		          		HPS_DDR3_RESET_N,
	input 		          		HPS_DDR3_RZQ,
	output		          		HPS_DDR3_WE_N,
	output		          		HPS_ENET_GTX_CLK,
	inout 		          		HPS_ENET_INT_N,
	output		          		HPS_ENET_MDC,
	inout 		          		HPS_ENET_MDIO,
	input 		          		HPS_ENET_RX_CLK,
	input 		     [3:0]		HPS_ENET_RX_DATA,
	input 		          		HPS_ENET_RX_DV,
	output		     [3:0]		HPS_ENET_TX_DATA,
	output		          		HPS_ENET_TX_EN,
	inout 		     [3:0]		HPS_FLASH_DATA,
	output		          		HPS_FLASH_DCLK,
	output		          		HPS_FLASH_NCSO,
	inout 		     [1:0]		HPS_GPIO,
	inout 		          		HPS_GSENSOR_INT,
	inout 		          		HPS_I2C_CONTROL,
	inout 		          		HPS_I2C1_SCLK,
	inout 		          		HPS_I2C1_SDAT,
	inout 		          		HPS_I2C2_SCLK,
	inout 		          		HPS_I2C2_SDAT,
	inout 		          		HPS_KEY,
	inout 		          		HPS_LED,
	output		          		HPS_SD_CLK,
	inout 		          		HPS_SD_CMD,
	inout 		     [3:0]		HPS_SD_DATA,
	output		          		HPS_SPIM_CLK,
	input 		          		HPS_SPIM_MISO,
	output		          		HPS_SPIM_MOSI,
	inout 		          		HPS_SPIM_SS,
	input 		          		HPS_UART_RX,
	output		          		HPS_UART_TX,
	input 		          		HPS_USB_CLKOUT,
	inout 		     [7:0]		HPS_USB_DATA,
	input 		          		HPS_USB_DIR,
	input 		          		HPS_USB_NXT,
	output		          		HPS_USB_STP,

	//inout 		    [35:0]		GPIO0,
	//inout 		    [35:0]		GPIO1,

	output                      COM_AD_DE1_0,   // SPI0_SS     : AD <- DE1 
	output                      COM_AD_DE1_1,   // SPI0_SCK    : AD <- DE1
	output                      COM_AD_DE1_2,   // SPI0_SD     : AD <- DE1
	input                       COM_AD_DE1_3,   // SPI0_SACK   : AD -> DE1
	input                       COM_AD_DE1_4,   // SPI1_SS     : AD -> DE1
	input                       COM_AD_DE1_5,   // SPI1_SCK    : AD -> DE1
	input                       COM_AD_DE1_6,   // SPI1_SD     : AD -> DE1
	output                      COM_AD_DE1_7,   // SPI1_SACK   : AD <- DE1
	output                      COM_AD_DE1_8,   // CLK_DE1_50M
	output                      COM_AD_DE1_9,   // 
	output                      COM_AD_DE1_10,  // 
	output                      COM_AD_DE1_11   // main_reset_n :
	);
	
	assign COM_AD_DE1_11 = main_reset_n;
	assign COM_AD_DE1_8  = CLOCK_50M;
	/*
		PLL pll0(
			.refclk   (CLOCK_50M),
			.rst      (0), 
			.outclk_0 (CLOCK_10M)
		);
	*/	
	reg [31:0] count=0;
	reg RESET_N=0;
	wire main_reset_n;

	always @(posedge CLOCK_50M) begin
		count <= count +1;
		LEDR <= count[29:20];
		if (count > 200_000_000) begin
			RESET_N <= 1;
		end
	end


	reg            SPI_WR;
	reg            SPI_RD;
	wire           SPI_VALID_RD;
	wire           SPI_BUSY_WR;
	reg   [63:0]   SPI_DATA_WR;
	wire  [63:0]   SPI_DATA_RD;



    soc_system u0 (
		  .clk_clk                                 (CLOCK_50M), 
        .reset_reset_n                           (SW[1]), 

        .memory_mem_a                            (HPS_DDR3_ADDR),   
        .memory_mem_ba                           (HPS_DDR3_BA),     
        .memory_mem_ck                           (HPS_DDR3_CK_P),   
        .memory_mem_ck_n                         (HPS_DDR3_CK_N),   
        .memory_mem_cke                          (HPS_DDR3_CKE),    
        .memory_mem_cs_n                         (HPS_DDR3_CS_N),   
        .memory_mem_ras_n                        (HPS_DDR3_RAS_N),  
        .memory_mem_cas_n                        (HPS_DDR3_CAS_N),  
        .memory_mem_we_n                         (HPS_DDR3_WE_N),   
        .memory_mem_reset_n                      (HPS_DDR3_RESET_N),
        .memory_mem_dq                           (HPS_DDR3_DQ),     
        .memory_mem_dqs                          (HPS_DDR3_DQS_P),  
        .memory_mem_dqs_n                        (HPS_DDR3_DQS_N),  
        .memory_mem_odt                          (HPS_DDR3_ODT),    
        .memory_mem_dm                           (HPS_DDR3_DM),     
        .memory_oct_rzqin                        (HPS_DDR3_RZQ),    

        .hps_io_hps_io_emac1_inst_TX_CLK         (HPS_ENET_GTX_CLK),            
        .hps_io_hps_io_emac1_inst_TXD0           (HPS_ENET_TX_DATA[0] ),          
        .hps_io_hps_io_emac1_inst_TXD1           (HPS_ENET_TX_DATA[1] ),          
        .hps_io_hps_io_emac1_inst_TXD2           (HPS_ENET_TX_DATA[2] ),          
        .hps_io_hps_io_emac1_inst_TXD3           (HPS_ENET_TX_DATA[3] ),          
        .hps_io_hps_io_emac1_inst_RXD0           (HPS_ENET_RX_DATA[0] ),          
        .hps_io_hps_io_emac1_inst_MDIO           (HPS_ENET_MDIO ),              
        .hps_io_hps_io_emac1_inst_MDC            (HPS_ENET_MDC  ),              
        .hps_io_hps_io_emac1_inst_RX_CTL         (HPS_ENET_RX_DV),              
        .hps_io_hps_io_emac1_inst_TX_CTL         (HPS_ENET_TX_EN),              
        .hps_io_hps_io_emac1_inst_RX_CLK         (HPS_ENET_RX_CLK),             
        .hps_io_hps_io_emac1_inst_RXD1           (HPS_ENET_RX_DATA[1] ),          
        .hps_io_hps_io_emac1_inst_RXD2           (HPS_ENET_RX_DATA[2] ),          
        .hps_io_hps_io_emac1_inst_RXD3           (HPS_ENET_RX_DATA[3] ), 

        .hps_io_hps_io_qspi_inst_IO0             (HPS_FLASH_DATA[0] ),                
        .hps_io_hps_io_qspi_inst_IO1             (HPS_FLASH_DATA[1] ),                
        .hps_io_hps_io_qspi_inst_IO2             (HPS_FLASH_DATA[2] ),                
        .hps_io_hps_io_qspi_inst_IO3             (HPS_FLASH_DATA[3] ),                
        .hps_io_hps_io_qspi_inst_SS0             (HPS_FLASH_NCSO ),                   
        .hps_io_hps_io_qspi_inst_CLK             (HPS_FLASH_DCLK ),                   
        .hps_io_hps_io_sdio_inst_CMD             (HPS_SD_CMD ),                       
        .hps_io_hps_io_sdio_inst_D0              (HPS_SD_DATA[0]  ),                  
        .hps_io_hps_io_sdio_inst_D1              (HPS_SD_DATA[1]  ),                  
        .hps_io_hps_io_sdio_inst_CLK             (HPS_SD_CLK),                        
        .hps_io_hps_io_sdio_inst_D2              (HPS_SD_DATA[2]  ),                  
        .hps_io_hps_io_sdio_inst_D3              (HPS_SD_DATA[3]  ),                  
        .hps_io_hps_io_usb1_inst_D0              (HPS_USB_DATA[0] ),                  
        .hps_io_hps_io_usb1_inst_D1              (HPS_USB_DATA[1] ),                  
        .hps_io_hps_io_usb1_inst_D2              (HPS_USB_DATA[2] ),                  
        .hps_io_hps_io_usb1_inst_D3              (HPS_USB_DATA[3] ),                  
        .hps_io_hps_io_usb1_inst_D4              (HPS_USB_DATA[4] ),                  
        .hps_io_hps_io_usb1_inst_D5              (HPS_USB_DATA[5] ),                  
        .hps_io_hps_io_usb1_inst_D6              (HPS_USB_DATA[6] ),                  
        .hps_io_hps_io_usb1_inst_D7              (HPS_USB_DATA[7] ),                  
        .hps_io_hps_io_usb1_inst_CLK             (HPS_USB_CLKOUT ),                   
        .hps_io_hps_io_usb1_inst_STP             (HPS_USB_STP ),                      
        .hps_io_hps_io_usb1_inst_DIR             (HPS_USB_DIR ),                      
        .hps_io_hps_io_usb1_inst_NXT             (HPS_USB_NXT ),               
        .hps_io_hps_io_spim1_inst_CLK            (HPS_SPIM_CLK  ),                       
        .hps_io_hps_io_spim1_inst_MOSI           (HPS_SPIM_MOSI ),                       
        .hps_io_hps_io_spim1_inst_MISO           (HPS_SPIM_MISO ),                       
        .hps_io_hps_io_spim1_inst_SS0            (HPS_SPIM_SS ),                         
        .hps_io_hps_io_uart0_inst_RX             (HPS_UART_RX ),                      
        .hps_io_hps_io_uart0_inst_TX             (HPS_UART_TX ),                      
        .hps_io_hps_io_i2c0_inst_SDA             (HPS_I2C1_SDAT ),                    
        .hps_io_hps_io_i2c0_inst_SCL             (HPS_I2C1_SCLK ),                    
        .hps_io_hps_io_i2c1_inst_SDA             (HPS_I2C2_SDAT ),                    
        .hps_io_hps_io_i2c1_inst_SCL             (HPS_I2C2_SCLK ),                 
        .hps_h2f_reset_reset_n                   (SW[0]),                   

        .hps_terminal_conduit_end_main_reset_n   (main_reset_n),
        .hps_terminal_conduit_end_rd             (SPI_RD),
        .hps_terminal_conduit_end_rd_valid       (SPI_VALID_RD),
        .hps_terminal_conduit_end_rd_instruction (SPI_DATA_RD),
        .hps_terminal_conduit_end_wr             (SPI_WR),
        .hps_terminal_conduit_end_wr_busy        (SPI_BUSY_WR),
        .hps_terminal_conduit_end_wr_instruction (SPI_DATA_WR),
        .pio_led_external_connection_export      ()//({32'b0|LEDR})
    );
	

    SPI_MASTER M(
		.CLK         (CLOCK_50M),
		.RESET_N     (main_reset_n),

		.WR          (SPI_WR),
		.DATA        (SPI_DATA_WR),
		.BUSY        (SPI_BUSY_WR),

		.SS          (COM_AD_DE1_0),
		.SCLK        (COM_AD_DE1_1),
		.SD          (COM_AD_DE1_2),
		.SACK        (COM_AD_DE1_3)
    );
	 
    SPI_SLAVE S(
		.CLK         (CLOCK_50M),
		.RESET_N     (main_reset_n),

		.RD          (SPI_RD),
		.DATA        (SPI_DATA_RD),
		.VALID       (SPI_VALID_RD),

		.SS          (COM_AD_DE1_4),
		.SCLK        (COM_AD_DE1_5),
		.SD          (COM_AD_DE1_6),
		.SACK        (COM_AD_DE1_7)
    );

endmodule
  